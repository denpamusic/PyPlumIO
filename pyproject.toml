# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html

[project]
name = "PyPlumIO"
authors = [
    {name = "Denis Paavilainen", email = "denpa@denpa.pro"}
]
description = "PyPlumIO is a native ecoNET library for Plum ecoMAX controllers."
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.9"
keywords = ["home", "automation", "heating"]
license = {text = "MIT License"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Home Automation",
]
dependencies = [
    "dataslots==1.2.0",
    "pyserial-asyncio==0.6",
    "typing-extensions==4.12.2"
]
dynamic = ["version"]

[project.urls]
"Documentation" = "https://pyplumio.denpa.pro"
"Source Code" = "https://github.com/denpamusic/PyPlumIO"
"Bug Tracker" = "https://github.com/denpamusic/PyPlumIO/issues"

[project.optional-dependencies]
test = [
    "codespell==2.3.0",
    "coverage==7.6.8",
    "mypy==1.13.0",
    "pyserial-asyncio-fast==0.14",
    "pytest==8.3.4",
    "pytest-asyncio==0.24.0",
    "ruff==0.8.1",
    "tox==4.23.2",
    "types-pyserial==3.5.0.20240826"
]
docs = [
    "sphinx==8.1.3",
    "sphinx_rtd_theme==3.0.2",
    "readthedocs-sphinx-search==0.3.2"
]
dev = [
    "pyplumio[test,docs]",
    "pre-commit==4.0.1",
    "tomli==2.2.1"
]


[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
platforms = ["any"]
packages = ["pyplumio"]

[tool.setuptools.package-data]
pyplumio = ["py.typed"]

[tool.setuptools_scm]
write_to = "pyplumio/_version.py"

[tool.codespell]
skip = ".git,.mypy_cache,.pytest_cache,.ruff_cache,.tox,.vscode,build,docs"

[tool.mypy]
python_version = "3.9"
show_error_codes = true
follow_imports = "silent"
local_partial_types = true
strict_equality = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
enable_error_code = [
    "ignore-without-code",
    "redundant-self",
    "truthy-iterable"
]
disable_error_code = [
    "annotation-unchecked",
    "import-not-found",
    "import-untyped"
]
extra_checks = false
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
warn_return_any = true
warn_unreachable = true
exclude = [
    "_version.py",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".tox",
    ".vscode",
    "build",
    "docs",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_incomplete_defs = false
disallow_untyped_defs = false

[tool.ruff]
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".tox",
    ".vscode",
    "build",
    "docs",
    "_version.py",
]
line-length = 88
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
select = [
    "B002", # Python does not support the unary prefix increment
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "B023", # Function definition does not bind loop variable {name}
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B904", # Use raise from to specify exception cause
    "C",  # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "D",  # docstrings
    "DTZ003",  # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004",  # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "G", # flake8-logging-format
    "I",  # isort
    "ICN001", # import concentions; {name} should be imported as {asname}
    "ISC001", # Implicitly concatenated string literals on one line
    "N804", # First argument of a class method should be named cls
    "N805", # First argument of a method should be named self
    "N815", # Variable {name} in class scope should not be mixedCase
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "PLC", # pylint
    "PLE", # pylint
    "PLR", # pylint
    "PLW", # pylint
    "Q000", # Double quotes found but single quotes preferred
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "S102", # Use of exec detected
    "S103",  # bad-file-permissions
    "S108",  # hardcoded-temp-file
    "S306",  # suspicious-mktemp-usage
    "S307",  # suspicious-eval-usage
    "S313",  # suspicious-xmlc-element-tree-usage
    "S314",  # suspicious-xml-element-tree-usage
    "S315",  # suspicious-xml-expat-reader-usage
    "S316",  # suspicious-xml-expat-builder-usage
    "S317",  # suspicious-xml-sax-usage
    "S318",  # suspicious-xml-mini-dom-usage
    "S319",  # suspicious-xml-pull-dom-usage
    "S320",  # suspicious-xmle-tree-usage
    "S601",  # paramiko-call
    "S602",  # subprocess-popen-with-shell-equals-true
    "S604",  # call-with-shell-equals-true
    "S608",  # hardcoded-sql-expression
    "S609",  # unix-command-wildcard-injection
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Merge with-statements that use the same scope
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM208", # Use {expr} instead of not (not {expr})
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of an if block
    "T100", # Trace found: {name} used
    "T20",  # flake8-print
    "TID251", # Banned imports
    "TRY004", # Prefer TypeError exception for invalid type
    "TRY302", # Remove exception handler; error is immediately re-raised
    "UP",  # pyupgrade
    "W",  # pycodestyle
]
ignore = [
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = [
    "pyplumio",
]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.per-file-ignores]

# Allow print in main
"pyplumio/__main__.py" = ["T201"]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "@overload"
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.tox]
legacy_tox_ini = """
    [tox]
    envlist = lint, type, py{39,310,311,312}
    isolated_build = True
    skip_missing_interpreters = True
    ignore_basepython_conflict = True

    [gh-actions]
    python =
        3.9: py39
        3.10: py310
        3.11: py311
        3.12: py312, lint, type

    [testenv]
    deps =
        -r{toxinidir}/requirements.txt
        -r{toxinidir}/requirements_test.txt

    commands =
        coverage run --source=pyplumio -m pytest tests/
        coverage report -m

    [testenv:lint]
    deps =
        -r{toxinidir}/requirements.txt
        -r{toxinidir}/requirements_test.txt

    commands =
        codespell
        ruff check .

    [testenv:test]
    deps =
        -r{toxinidir}/requirements.txt
        -r{toxinidir}/requirements_test.txt
    commands =
        pytest

    [testenv:type]
    deps =
        -r{toxinidir}/requirements.txt
        -r{toxinidir}/requirements_test.txt

    commands =
        mypy .
"""
